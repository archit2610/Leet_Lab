// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model USER {
  id             String          @id @default(uuid())
  name           String
  password       String
  email          String          @unique
  image          String?
  role           UserRole        @default(USER)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  problems       PROBLEM[]
  submission     SUBMISSION[]
  solvedProblems PROBLEMSOLVED[]
}

model PROBLEM {
  id                String          @id @default(uuid())
  title             String
  description       String
  difficulty        Difficulty
  tags              String[]
  userId            String
  examples          Json
  constraints       String
  hints             String?
  editorial         String?
  testCases         Json
  codeSnippet       Json
  refrenceSolutions Json
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  user              USER            @relation(fields: [userId], references: [id], onDelete: Cascade)
  submission        SUBMISSION[]
  solvedBy          PROBLEMSOLVED[]
}

model SUBMISSION {
  id            String           @id @default(uuid())
  userId        String
  problemId     String
  sourceCode    Json
  laguage       String
  stdin         String?
  stdout        String?
  stderr        String?
  compileOutput String?
  status        String
  memory        String
  time          String
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  user          USER             @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem       PROBLEM          @relation(fields: [problemId], references: [id], onDelete: Cascade)
  testCases     TESTCASERESULT[]
}

model TESTCASERESULT {
  id              String     @id @default(uuid())
  submissionID    String
  testCase        Int
  passed          Boolean
  stdin           String?
  stdout          String?
  stderr          String?
  expoectedOutput String?
  compileOutput   String?
  status          String
  memory          String?
  time            String?
  submission      SUBMISSION @relation(fields: [submissionID], references: [id], onDelete: Cascade)

  @@index([submissionID])
}

model PROBLEMSOLVED {
  id        String   @id @default(uuid())
  userId    String
  problemId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      USER     @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem   PROBLEM  @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}
